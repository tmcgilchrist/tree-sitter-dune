==========
Executable
==========

(executable
 (name e)
 (public_name p)
 (libraries a b c))

(executable
 (name sexp_tests)
 (modules sexp_tests)
 (libraries stdune dune_lang))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (public_name)
    (field_name)
    (library_name)
    (library_name)
    (library_name))
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (module_name)
    (field_name)
    (library_name)
    (library_name)))

====
Rule
====

(rule
 (mode promote)
 (alias runtest)
 (targets setup.defaults.ml)
 (deps
  (:configure %{project_root}/boot/configure.ml))
 (action
  (chdir
   %{project_root}
   (setenv
    DUNE_CONFIGURE_OUTPUT
    "src/dune_rules/setup.defaults.ml"
    (run %{ocaml} %{configure})))))

(rule
 (mode promote)
 (target assets.ml)
 (action
  (with-stdout-to
   %{target}
   (progn
    (echo "let jbuild_plugin_ml = {jbp|\n")
    (cat %{project_root}/plugin/jbuild_plugin.ml)
    (echo "|jbp}\n\n")
    (echo "let jbuild_plugin_mli = {jbp|")
    (cat %{project_root}/plugin/jbuild_plugin.mli)
    (echo "|jbp}")))))

(rule
 (targets my.cmxs)
 (deps plugin%{ext_lib} .dummy.objs/native/dummy__X )
 (action (run %{ocamlopt} -shared -o %{targets} %{cmxa:plugin} %{cmx:x3})))

(rule
 (fallback false)
 (targets)
 (action (with-stdout-to foo.txt (echo "testing"))))

(rule
 (targets
  (dir d))
 (action
  (progn
   (run mkdir d)
   (run cat > d/foo))))

(rule
 (targets 01.bar)
 (action
  (run ./incr.exe y %{targets}))
 (locks m))

(rule
 (targets promoted)
 (action (with-stdout-to promoted (echo "Hello, world!")))
 (mode (promote-into subdir)))

(rule
 (targets only1 only2)
 (action
  (progn
   (with-stdout-to only1 (echo "0"))
   (with-stdout-to only2 (echo "0"))))
 (mode (promote (only *1))))

(rule
 (target into+ignoring)
 (mode (promote (into subdir)))
 (action (with-stdout-to %{target} (echo "hello"))))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (field_name)
    (alias_name)
    (field_name)
    (file_name_target
      (file_name))
    (field_name)
    (named_variable)
    (file_name)
    (field_name)
    (action
      (action_name)
      (file_name)
      (action
        (action_name)
        (quoted_string)
        (action
          (action_name)
          (file_name_dep
            (file_name))))))
  (stanza
    (stanza_name)
    (field_name)
    (field_name)
    (field_name)
    (action
      (action_name)
      (file_name_target
        (file_name))
      (action
        (action_name)
        (action
          (action_name)
          (quoted_string))
        (action
          (action_name)
          (file_name_dep
            (file_name)))
        (action
          (action_name)
          (quoted_string))
        (action
          (action_name)
          (quoted_string))
        (action
          (action_name)
          (file_name_dep
            (file_name)))
        (action
          (action_name)
          (quoted_string)))))
  (stanza
    (stanza_name)
    (field_name)
    (file_name_target
      (file_name))
    (field_name)
    (file_name)
    (file_name)
    (field_name)
    (action
      (action_name)
      (file_name_dep
        (file_name))))
  (stanza
    (stanza_name)
    (field_name)
    (field_name)
    (field_name)
    (action
      (action_name)
      (file_name_target
        (file_name))
      (action
        (action_name)
        (quoted_string))))
  (stanza
    (stanza_name)
    (field_name)
    (file_name_target
      (file_name))
    (field_name)
    (action
      (action_name)
      (action
        (action_name)
        (file_name_dep
          (file_name)))
      (action
        (action_name)
        (file_name_dep
          (file_name)))))
  (stanza
    (stanza_name)
    (field_name)
    (file_name_target
      (file_name))
    (field_name)
    (action
      (action_name)
      (file_name_dep
        (file_name)))
    (field_name)
    (lock_name))
  (stanza
    (stanza_name)
    (field_name)
    (file_name_target
      (file_name))
    (field_name)
    (action
      (action_name)
      (file_name_target
        (file_name))
      (action
        (action_name)
        (quoted_string)))
    (field_name)
    (field_name)
    (file_name))
  (stanza
    (stanza_name)
    (field_name)
    (file_name_target
      (file_name))
    (file_name_target
      (file_name))
    (field_name)
    (action
      (action_name)
      (action
        (action_name)
        (file_name_target
          (file_name))
        (action
          (action_name)
          (quoted_string)))
      (action
        (action_name)
        (file_name_target
          (file_name))
        (action
          (action_name)
          (quoted_string))))
    (field_name)
    (field_name)
    (field_name))
  (stanza
    (stanza_name)
    (field_name)
    (field_name)
    (field_name)
    (field_name)
    (file_name)
    (field_name)
    (action
      (action_name)
      (file_name_target
        (file_name))
      (action
        (action_name)
        (quoted_string)))))

=======
library
=======

(library
 (name dune_rules)
 (libraries stdune fs unix)
 (modules sha1)
 (synopsis "Internal Dune library, do not use!")
 (instrumentation
  (backend bisect_ppx)))

(library
 (name bar)
 (libraries impl1)
 (modules))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (library_name)
    (library_name)
    (library_name)
    (field_name)
    (module_name)
    (field_name)
    (quoted_string)
    (field_name)
    (sexp
      (sexp)
      (sexp)))
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (library_name)
    (field_name)))

==========
enabled_if
==========

(rule
 (target flags.sexp)
 (enabled_if
  (= %{os_type} "Win32"))
 (action
  (with-stdout-to
   %{target}
   (echo "(-DUNICODE -D_UNICODE)"))))

(rule
 (target flags.sexp)
 (enabled_if
  (<> %{os_type} "Win32"))
 (action
  (with-stdout-to
   %{target}
   (echo "()"))))

(rule
(enabled_if
 (or
  (<> %{system} macosx)
  (<> %{architecture} arm64)))
(action
 (write-file extra_flags.sexp "()")))

(rule
 (enabled_if
  (and
   (= %{system} macosx)
   (= %{architecture} arm64)))
 (action
  (write-file extra_flags.sexp "(-ccopt -Wl,-no_warn_duplicate_libraries)")))

(library
 (name futurecaml)
 (modules futurecaml)
 (enabled_if (> %{ocaml_version} 500.04.0)))

(library
 (name lte414caml)
 (modules lte414caml)
 (enabled_if
  (<= %{ocaml_version} %{ocaml_version})))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (field_name)
    (blang
      (blang_op)
      (blang)
      (blang
        (quoted_string)))
    (field_name)
    (action
      (action_name)
      (file_name_target
        (file_name))
      (action
        (action_name)
        (quoted_string))))
  (stanza
    (stanza_name)
    (field_name)
    (field_name)
    (blang
      (blang_op)
      (blang)
      (blang
        (quoted_string)))
    (field_name)
    (action
      (action_name)
      (file_name_target
        (file_name))
      (action
        (action_name)
        (quoted_string))))
  (stanza
    (stanza_name)
    (field_name)
    (blang
      (blang_op)
      (blang
        (blang_op)
        (blang)
        (blang))
      (blang
        (blang_op)
        (blang)
        (blang)))
    (field_name)
    (action
      (action_name)
      (file_name_target
        (file_name))
      (quoted_string)))
  (stanza
    (stanza_name)
    (field_name)
    (blang
      (blang_op)
      (blang
        (blang_op)
        (blang)
        (blang))
      (blang
        (blang_op)
        (blang)
        (blang)))
    (field_name)
    (action
      (action_name)
      (file_name_target
        (file_name))
      (quoted_string)))
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (module_name)
    (field_name)
    (blang
      (blang_op)
      (blang)
      (blang)))
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (module_name)
    (field_name)
    (blang
      (blang_op)
      (blang)
      (blang))))

=========
re_export
=========

(library
  (name        opam_repository)
  (libraries   unix (re_export opam_format))
  (wrapped     false))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (library_name)
    (field_name)
    (library_name)
    (field_name)))

=============
vendored_dirs
=============

(vendored_dirs *)

---

(source_file
  (stanza
    (stanza_name)
    (sexp)))

======
select
======

(executable
 (name main)
 (modules a main)
 (libraries
  (select
   a.ml
   from
   (a -> a.pre_413.ml)
   (-> a.unix.ml))))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (module_name)
    (module_name)
    (field_name)
    (field_name)
    (sexps1
      (sexp)
      (sexp)
      (sexp
        (sexp)
        (sexp)
        (sexp))
      (sexp
        (sexp)
        (sexp)))))

========
ocamllex
========

(ocamllex opamLineLexer opamInterpLexer)

---

(source_file
  (stanza
    (stanza_name)
    (module_name)
    (module_name)))

================
ocamllex modules
================

(ocamllex (modules qtest_bin misclex))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (module_name)))

=========
ocamlyacc
=========

(ocamlyacc opamBaseParser)

---

(source_file
  (stanza
    (stanza_name)
    (module_name)))

=================
ocamlyacc modules
=================

(ocamlyacc (modules qparse))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)))

===============
include_subdirs
===============

(include_subdirs unqualified)

---

(source_file
  (stanza
    (stanza_name)
    (sexp)))

====
test
====

(test
 (name gh637)
 (package dune-private-libs)
 (libraries stdune ocaml_config)
 (deps Makefile.config))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (sexp
      (sexp)
      (sexp))
    (field_name)
    (library_name)
    (library_name)
    (sexp
      (sexp)
      (sexp))))

==============
data_only_dirs
==============

(data_only_dirs foo_dir)

---

(source_file
  (stanza
    (stanza_name)
    (file_name)))

====
cram
====

(cram
 (applies_to multiple-merlin-contexts opam)
 (deps %{bin:opam}))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (field_name)
    (file_name)))

====
dirs
====

(dirs sub sub2 sub3)

---

(source_file
  (stanza
    (stanza_name)
    (sexp)
    (sexp)
    (sexp)))

========
toplevel
========

(toplevel
 (name tt)
 (libraries foo))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (library_name)))

=======
install
=======

(install
 (section etc)
 (files file.conf))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (field_name)
    (sexp)))

=============
documentation
=============

(documentation)

---

(source_file
  (stanza
    (stanza_name)))

===
env
===

(env (_ (env-vars (ITALY "Biscotti") (FRANCE "Petit Beurre") (AMERICA "Oreo") (ENGLAND "Snickerdoodle"))))

---

(source_file
  (stanza
    (stanza_name)
    (sexp
      (sexp)
      (sexp
        (sexp)
        (sexp
          (sexp)
          (sexp
            (quoted_string)))
        (sexp
          (sexp)
          (sexp
            (quoted_string)))
        (sexp
          (sexp)
          (sexp
            (quoted_string)))
        (sexp
          (sexp)
          (sexp
            (quoted_string)))))))

======
subdir
======

(subdir
 fake_opam_root/default
 (dirs :standard .opam-switch))

---

(source_file
  (stanza
    (stanza_name)
    (file_name)
    (stanza
      (stanza_name)
      (sexp)
      (sexp))))

==================
wrapped transition
==================

(library
 (name mylib)
 (modules_without_implementation intf_only)
 (wrapped (transition "Will be removed past 2020-20-20")))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (sexp
      (sexp)
      (sexp))
    (field_name)
    (field_name)
    (quoted_string)))

==========
ppx.driver
==========

(library
 (public_name replacesdriver)
 (libraries compiler-libs.common)
 (modules ())
 (ppx.driver
  (main "(fun () -> print_endline \"replacesdriver\"; Array.iter print_endline Sys.argv)")
  (replaces testdriver)))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (public_name)
    (field_name)
    (library_name)
    (field_name)
    (field_name)
    (sexps1
      (sexp
        (sexp)
        (sexp
          (quoted_string)))
      (sexp
        (sexp)
        (sexp)))))

==============
enabled_if and
==============

(rule
 (alias runtest)
 (enabled_if
  (and
   (>= %{ocaml_version} "4.08.0")
   (< %{ocaml_version} "4.12.0")))
 (deps
  (:test test.ml)
  (package ppxlib))
 (action
  (chdir
   %{project_root}
   (progn
    (run expect-test %{test})
    (diff? %{test} %{test}.corrected)))))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (alias_name)
    (field_name)
    (blang
      (blang_op)
      (blang
        (blang_op)
        (blang)
        (blang
          (quoted_string)))
      (blang
        (blang_op)
        (blang)
        (blang
          (quoted_string))))
    (field_name)
    (named_variable)
    (file_name)
    (package_name)
    (field_name)
    (action
      (action_name)
      (file_name)
      (action
        (action_name)
        (action
          (action_name)
          (file_name_dep
            (file_name)))
        (action
          (action_name)
          (file_name_dep
            (file_name))
          (file_name_dep
            (file_name)))))))

==========
copy_files
==========

(copy_files (files *.txt))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (file_name)))

======
menhir
======

(menhir
 (modules parser))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)))

====================
menhir with merge_into
====================

(menhir
 (modules parser lexer)
 (merge_into combined))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (module_name)
    (field_name)
    (module_name)))

=======
include
=======

(include dune.inc)

---

(source_file
  (stanza
    (stanza_name)
    (file_name)))

===============
ignored_subdirs
===============

(ignored_subdirs vendor _build)

---

(source_file
  (stanza
    (stanza_name)
    (file_name)
    (file_name)))

===============
foreign_library
===============

(foreign_library
 (archive_name mylib)
 (language c))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (field_name)))

======
plugin
======

(plugin
 (name myplugin)
 (libraries base))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (module_name)
    (field_name)
    (library_name)))

===
mdx
===

(mdx
 (files README.md))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)
    (file_name)))

==========
coq.theory
==========

(coq.theory
 (name MyTheory))

---

(source_file
  (stanza
    (stanza_name)
    (field_name)))

========================
deprecated_library_name
========================

(deprecated_library_name old_lib new_lib)

---

(source_file
  (stanza
    (stanza_name)
    (library_name)
    (library_name)))
