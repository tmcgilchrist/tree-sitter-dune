name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install tree-sitter CLI
        run: npm install -g tree-sitter-cli

      - name: Generate parser
        run: tree-sitter generate

      - name: Run tests
        run: tree-sitter test

  publish-npm:
    name: Publish to NPM
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install tree-sitter CLI
        run: npm install -g tree-sitter-cli

      - name: Generate parser
        run: tree-sitter generate

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-crates:
    name: Publish to crates.io
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install tree-sitter CLI
        run: npm install -g tree-sitter-cli

      - name: Generate parser
        run: tree-sitter generate

      - name: Create Rust bindings directory structure
        run: |
          mkdir -p bindings/rust
          cat > bindings/rust/lib.rs << 'EOF'
          //! This crate provides Dune language support for the [tree-sitter][] parsing library.
          //!
          //! Typically, you will use the [language][language func] function to add this language to a
          //! tree-sitter [Parser][], and then use the parser to parse some code:
          //!
          //! ```
          //! let code = "(library (name my_lib))";
          //! let mut parser = tree_sitter::Parser::new();
          //! parser.set_language(&tree_sitter_dune::LANGUAGE.into()).expect("Error loading Dune grammar");
          //! let tree = parser.parse(code, None).unwrap();
          //! ```
          //!
          //! [Language]: https://docs.rs/tree-sitter/*/tree_sitter/struct.Language.html
          //! [language func]: fn.language.html
          //! [Parser]: https://docs.rs/tree-sitter/*/tree_sitter/struct.Parser.html
          //! [tree-sitter]: https://tree-sitter.github.io/

          use tree_sitter_language::LanguageFn;

          extern "C" {
              fn tree_sitter_dune() -> *const ();
          }

          /// The tree-sitter [`LanguageFn`] for this grammar.
          pub const LANGUAGE: LanguageFn = unsafe { LanguageFn::from_raw(tree_sitter_dune) };

          /// The content of the [`node-types.json`][] file for this grammar.
          ///
          ///  [`node-types.json`]: https://tree-sitter.github.io/tree-sitter/using-parsers#static-node-types
          pub const NODE_TYPES: &str = include_str!("../../src/node-types.json");

          /// The syntax highlighting query for this language.
          pub const HIGHLIGHTS_QUERY: &str = include_str!("../../queries/highlights.scm");

          /// The injection query for this language.
          pub const INJECTIONS_QUERY: &str = include_str!("../../queries/injections.scm");

          #[cfg(test)]
          mod tests {
              #[test]
              fn test_can_load_grammar() {
                  let mut parser = tree_sitter::Parser::new();
                  parser
                      .set_language(&super::LANGUAGE.into())
                      .expect("Error loading Dune grammar");
              }
          }
          EOF

          cat > bindings/rust/build.rs << 'EOF'
          fn main() {
              let src_dir = std::path::Path::new("src");

              let mut c_config = cc::Build::new();
              c_config.include(src_dir);
              c_config
                  .flag_if_supported("-Wno-unused-parameter")
                  .flag_if_supported("-Wno-unused-but-set-variable")
                  .flag_if_supported("-Wno-trigraphs");
              let parser_path = src_dir.join("parser.c");
              c_config.file(&parser_path);

              c_config.compile("tree-sitter-dune");
              println!("cargo:rerun-if-changed={}", parser_path.to_str().unwrap());
          }
          EOF

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}

  create-release:
    name: Create GitHub Release
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
